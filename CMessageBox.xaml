<Window x:Class="Multimanager.CMessageBox"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:Multimanager"
        xmlns:Themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2"
        mc:Ignorable="d" ResizeMode="CanResizeWithGrip" WindowStyle="None" AllowsTransparency="True"
        Title="CMessageBox" Height="175" Width="400">

    <Window.DataContext>
        <!--#region TEMPLATE-->
        <local:XAMLStyles/>
        <!--#endregion-->
    </Window.DataContext>
    
    <Window.Resources>
        <!--#region TEMPLATE STYLES-->
        <local:StarWidthConverter x:Key="starWidthConverter"/>

        <Style x:Key="FocusVisual">
            <Setter Property="Control.Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="1" StrokeDashArray="1 2"/>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <!--#region Buttons-->
        <SolidColorBrush x:Key="Button.Static.Background" Color="{Binding backgroundSolid}"/>
        <SolidColorBrush x:Key="Button.Static.Border" Color="{Binding foregroundSolid}"/>
        <SolidColorBrush x:Key="Button.MouseOver.Background" Color="{Binding accentSolid}"/>
        <SolidColorBrush x:Key="Button.MouseOver.Border" Color="{Binding foregroundSolid}"/>
        <SolidColorBrush x:Key="Button.Pressed.Background" Color="{Binding accentSolid}"/>
        <SolidColorBrush x:Key="Button.Pressed.Border" Color="{Binding foregroundSolid}"/>
        <SolidColorBrush x:Key="Button.Disabled.Background" Color="{Binding borderSolid}"/>
        <SolidColorBrush x:Key="Button.Disabled.Border" Color="{Binding foregroundSolid}"/>
        <SolidColorBrush x:Key="Button.Disabled.Foreground" Color="{Binding foregroundSolid}"/>
        <Style x:Key="buttonGrey" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{Binding borderSolid}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{Binding borderSolid}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="redButton" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="#FF0000"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="#EE0000"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <Style x:Key="themedButton" TargetType="{x:Type Button}">
            <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
            <Setter Property="Background" Value="{StaticResource Button.Static.Background}"/>
            <Setter Property="BorderBrush" Value="{StaticResource Button.Static.Border}"/>
            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
            <Setter Property="BorderThickness" Value="1"/>
            <Setter Property="FontFamily" Value="Century Gothic"/>
            <Setter Property="HorizontalContentAlignment" Value="Center"/>
            <Setter Property="VerticalContentAlignment" Value="Center"/>
            <Setter Property="Padding" Value="1"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Button}">
                        <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" SnapsToDevicePixels="true">
                            <ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsDefaulted" Value="true">
                                <Setter Property="BorderBrush" TargetName="border" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>
                            </Trigger>
                            <Trigger Property="IsMouseOver" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.MouseOver.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.MouseOver.Border}"/>
                            </Trigger>
                            <Trigger Property="IsPressed" Value="true">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Pressed.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Pressed.Border}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Background" TargetName="border" Value="{StaticResource Button.Disabled.Background}"/>
                                <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource Button.Disabled.Border}"/>
                                <Setter Property="TextElement.Foreground" TargetName="contentPresenter" Value="{StaticResource Button.Disabled.Foreground}"/>
                            </Trigger>
                            <Trigger Property="IsEnabled" Value="True">
                                <!--<Setter Property="Background" TargetName="border" Value="{StaticResource Button.Static.Background}"/>-->
                                <Setter Property="TextElement.Foreground" TargetName="border" Value="{Binding foregroundSolid}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--#endregion-->

        <!--#region Labels-->
        <Style x:Key="themedLabel" TargetType="{x:Type Label}">
            <Setter Property="Foreground" Value="{Binding foregroundSolid}"/>
            <Setter Property="Background" Value="Transparent"/>
            <Setter Property="Padding" Value="5"/>
            <Setter Property="HorizontalContentAlignment" Value="Left"/>
            <Setter Property="VerticalContentAlignment" Value="Top"/>
            <Setter Property="FontFamily" Value="Century Gothic"/>
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="{x:Type Label}">
                        <Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                            <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsEnabled" Value="false">
                                <Setter Property="Foreground" Value="{Binding borderSolid}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>
        <!--#endregion-->
        <!--#endregion-->
    </Window.Resources>

    <Grid x:Name="background" Background="{Binding backgroundSolid}">
        <Grid x:Name="titleBar" Height="30" VerticalAlignment="Top" MouseDown="titleBar_MouseDown" Background="{Binding accentSolid}">
            <Label x:Name="windowTitle" Foreground="{Binding foregroundSolid}" Content="Title" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="45,2,0,0" Height="28"/>
            <Image HorizontalAlignment="Left" Height="30" VerticalAlignment="Top" Width="30" Source="Resources/Icon.ico" Margin="10,0,0,0"/>
        </Grid>
        <StackPanel Orientation="Horizontal" FlowDirection="RightToLeft" Margin="0,0,10,10" VerticalAlignment="Bottom">
            <Button x:Name="btnCancel" Content="Cancel" VerticalAlignment="Bottom" HorizontalAlignment="Right" Width="70" Height="20" Margin="0,0,5,0" Click="btnCancel_Click" Style="{DynamicResource themedButton}"/>
            <Button x:Name="btnOk" Content="Ok" VerticalAlignment="Bottom" HorizontalAlignment="Right" Width="70" Height="20" Margin="0,0,5,0" Click="btnOk_Click" Style="{DynamicResource themedButton}"/>
            <Button x:Name="btnNo" Content="No" VerticalAlignment="Bottom" HorizontalAlignment="Right" Width="70" Height="20" Margin="0,0,5,0" Click="btnNo_Click" Style="{DynamicResource themedButton}"/>
            <Button x:Name="btnYes" Content="Yes" VerticalAlignment="Bottom" HorizontalAlignment="Right" Width="70" Height="20" Margin="0,0,5,0" Click="btnYes_Click" Style="{DynamicResource themedButton}"/>
        </StackPanel>
        <RichTextBox x:Name="messageBox" Margin="10,35,13,35" IsReadOnly="True" Background="{x:Null}" CaretBrush="{Binding foregroundSolid}" SelectionBrush="{Binding accentSolid}" Foreground="{Binding foregroundSolid}" BorderBrush="{Binding foregroundSolid}">
            <FlowDocument/>
        </RichTextBox>
        <Border x:Name="windowBorder" BorderBrush="{Binding accentSolid}" BorderThickness="1"/>
    </Grid>
</Window>
